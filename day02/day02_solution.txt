# Advent of code 2022-day01

counter = 0
lines = Array.new
File.open('/home/agoston/personal/projects/advent-of-code-2022/day02/day02_input.txt','r') do |f1|
  while !f1.eof?
    lines.append(f1.readline.rstrip)
  end
end
pointsFirst =
[
  ["A X", 4],
  ["A Y", 8],
  ["A Z", 3],
  ["B X", 1],
  ["B Y", 5],
  ["B Z", 9],
  ["C X", 7],
  ["C Y", 2],
  ["C Z", 6]
]
pointsSecond =
[
  ["A X", 3],
  ["A Y", 4],
  ["A Z", 8],
  ["B X", 1],
  ["B Y", 5],
  ["B Z", 9],
  ["C X", 2],
  ["C Y", 6],
  ["C Z", 7]
]




define :drum_AX do
  in_thread do
    14.times do
      sample :drum_cymbal_closed
      sleep 0.5
    end
    sample :drum_cymbal_open
    sleep 0.5
    sample :drum_cymbal_closed
    sleep 0.5
  end
  1.times do
    sample :drum_heavy_kick
    sleep 0.5
    sample :drum_heavy_kick
    sleep 0.5
    sample :drum_snare_hard
    sleep 1
    sample :drum_heavy_kick
    sleep 1
    sample :drum_snare_hard
    sleep 1
    sample :drum_heavy_kick
    sleep 0.5
    sample :drum_heavy_kick
    sleep 0.5
    sample :drum_snare_hard
    sleep 1
    sample :drum_heavy_kick
    sleep 1
    sample :drum_snare_hard
    sleep 1
  end
  
end

define :drum_AY do
  in_thread do
    2.times do
      7.times do
        sample :drum_cymbal_closed
        sleep 0.5
      end
      sample :drum_cymbal_closed
      sample :drum_cymbal_pedal, amp: 2, rate: 2
      sleep 0.25
      sample :drum_cymbal_pedal, amp: 2, rate: 2
      sleep 0.25
    end
    
  end
  
  sample :drum_heavy_kick
  sleep 1
  sample :drum_snare_hard
  sleep 0.5
  sample :drum_heavy_kick
  sleep 0.5
  sample :drum_heavy_kick
  sleep 1.0
  sample :drum_snare_hard
  sleep 1
  sample :drum_heavy_kick
  sleep 1
  sample :drum_snare_hard
  sleep 0.5
  sample :drum_heavy_kick
  sleep 0.5
  sample :drum_heavy_kick
  sleep 1.0
  sample :drum_snare_hard
  sleep 1
  
end

define :drum_AZ do
  in_thread do
    3.times do
      3.times do
        sample :drum_cymbal_closed
        sleep 0.5
      end
      sample :drum_snare_soft
      sleep 0.5
    end
    sample :drum_cowbell
    sleep 0.25
    sample :drum_cowbell
    sleep 0.75
    sample :drum_cowbell, rate: 1.4
    sleep 0.25
    sample :drum_cowbell, rate: 1.4
    sleep 0.75
    sample :drum_cowbell, rate: 1.6
    sleep 0.25
    sample :drum_cowbell, rate: 1.6
    sleep 0.75
    sample :drum_splash_hard
    sleep 1
  end
  
  sample :drum_heavy_kick
  sleep 1
  sample :drum_snare_hard
  sleep 1
  sample :drum_heavy_kick
  sleep 0.5
  sample :drum_heavy_kick
  sleep 0.5
  sample :drum_tom_mid_soft
  sample :drum_snare_hard
  sleep 1
  sample :drum_heavy_kick
  sleep 1
  sample :drum_snare_hard
  sleep 0.5
  sample :drum_tom_lo_soft
  sleep 0.5
  sample :drum_heavy_kick
  sleep 1
  sample :drum_snare_hard
  sleep 1
  
end

define :melody_and_bass_BX do
  chords = [(chord :C, :minor7), (chord :Ab, :major7)].ring
  
  in_thread do
    2.times do
      c = chords.tick
      play c[5], release: 0.25
      sleep 0.25
      play c[5], release: 0.25
      sleep 0.25
      play c[3], release: 0.5
      sleep 0.5
      play c[7], release: 0.25
      sleep 0.25
      play c[2], release: 0.25
      sleep 0.25
      play c[4], release: 0.5
      sleep 0.5
      play c[3], release: 1
      sleep 1
      play c[1], release: 0.25
      sleep 0.25
      play c[2], release: 0.25
      sleep 0.25
      play c[3], release: 0.5
      sleep 0.5
    end
  end
  
  
  with_octave -2 do
    2.times do
      c = chords.tick
      play c[0], release: 2.2
      sleep 2
      play c[3], release: 0.6
      sleep 0.5
      play c[4], release: 1.6
      sleep 1.5
    end
  end
  
end

define :melody_and_bass_BY do
  chords = [(chord :Eb, :major7), (chord :Bb, "7")].ring
  
  in_thread do
    2.times do
      c = chords.tick
      play c[1], release: 0.25
      sleep 0.25
      play c[2], release: 0.25
      sleep 0.25
      play c[3], release: 0.25
      sleep 0.25
      play c[7], release: 0.25
      sleep 0.25
      play c[6], release: 0.5
      sleep 0.5
      play c[4], release: 1
      sleep 1
      play c[6], release: 1
      sleep 1
      play c[1], release: 0.25
      sleep 0.25
      play c[2], release: 0.25
      sleep 0.25
    end
  end
  
  with_octave -3 do
    2.times do
      c = chords.tick
      play c[2], release: 0.3
      sleep 0.25
      play c[2], release: 0.3
      sleep 0.25
      play c[2], release: 0.3
      sleep 0.5
      play c[5], release: 0.7
      sleep 0.5
      play c[0], release: 0.7
      sleep 0.5
      play c[3], release: 1.1
      sleep 1.0
      play c[1], release: 1.1
      sleep 1.0
    end
  end
  
end

define :melody_and_bass_BZ do
  chords = [chord(:D, :minor7), chord(:Bb, :major7), chord(:C, "7")].ring
  
  in_thread do
    2.times do
      c = chords.tick
      play c[7], release: 0.5
      sleep 0.5
      play c[7], release: 0.5
      sleep 0.5
      play c[4], release: 0.25
      sleep 0.25
      play c[5], release: 0.25
      sleep 0.25
      play c[6], release: 0.25
      sleep 0.25
      play c[7], release: 0.25
      sleep 0.25
      play c[0], release: 1
      sleep 1
      play c[3], release: 0.5
      sleep 0.5
      play c[2], release: 0.25
      sleep 0.25
      play c[2], release: 0.25
      sleep 0.25
    end
  end
  
  with_octave -2 do
    play chords[1], release: 2
    sleep 2
    play chords[3], release: 2
    sleep 2
    play chords[2], release: 1
    sleep 1
    play chords[2], release: 1
    sleep 1
    play chords[3], release: 2
    sleep 2
  end
  
end

define :ambient_CX do
  sample :ambi_glass_hum, beat_stretch: 8, amp:0.3
  sample :elec_lo_snare, beat_stretch: 8, amp:0.2
  sample :elec_bong, beat_stretch: 4, amp:2
  sleep 4
  sample :elec_bong, beat_stretch: 4, amp:2
  
end

define :ambient_CY do
  sample :ambi_lunar_land, beat_stretch: 8, amp:0.5
  sample :perc_swash , beat_stretch: 8, amp:1
  sleep 4
  sample :elec_fuzz_tom, beat_stretch: 4, amp:0.2
  sample :perc_snap, beat_stretch: 4, amp:0.3
  
end

define :ambient_CZ do
  sample :elec_cymbal, beat_stretch: 8, amp:0.3
  sample :bass_hard_c , beat_stretch: 8, amp:0.3
  sleep 4
  sample :elec_filt_snare, beat_stretch: 4, amp:0.2
  sample :elec_triangle , beat_stretch: 4, amp:0.1
  
end



drums = [method(:drum_AX), method(:drum_AY), method(:drum_AZ)].ring
melodiesAndBasses = [method(:melody_and_bass_BX), method(:melody_and_bass_BY), method(:melody_and_bass_BZ)].ring
ambients = [method(:ambient_CX), method(:ambient_CY), method(:ambient_CZ)].ring
live_loop :main do
  use_synth :blade
  
  
  lineCounter = 0
  sumPointsFirst = 0
  sumPointsSecond = 0
  
  20.times do
    occurencies=
    [
      ["A X", 0],
      ["A Y", 0],
      ["A Z", 0],
      ["B X", 0],
      ["B Y", 0],
      ["B Z", 0],
      ["C X", 0],
      ["C Y", 0],
      ["C Z", 0]
    ]
    
    125.times do
      linea = lines[lineCounter]
      lineCounter += 1
      occurencies.each {|o|
        if o[0] == linea
          o[1]+=1
          break
        end
      }
      pointsFirst.each {|p|
        if p[0] == linea
          sumPointsFirst += p[1]
          break
        end
      }
      pointsSecond.each {|p|
        if p[0] == linea
          sumPointsSecond += p[1]
          break
        end
      }
    end
    #print occurencies
    
    drumSeed = (occurencies[0][1] + occurencies[1][1] + occurencies[2][1])%3
    melodyAndBassSeed = (occurencies[3][1] + occurencies[4][1] + occurencies[5][1])%3
    ambientSeed = (occurencies[6][1] + occurencies[7][1] + occurencies[8][1])%3
    
    print occurencies[drumSeed][0]
    print occurencies[melodyAndBassSeed + 3][0]
    print occurencies[ambientSeed + 6][0]
    
    4.times do
      drum = drums[drumSeed]
      melodyAndBass = melodiesAndBasses[melodyAndBassSeed]
      ambient = ambients[ambientSeed]
      in_thread do
        drum.call
      end
      in_thread do
        melodyAndBass.call
      end
      ambient.call
    end
  end
  print sumPointsFirst
  print sumPointsSecond
  stop
end
